// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: file.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PictureStorageService_UploadPicture_FullMethodName      = "/pictures_storage.PictureStorageService/UploadPicture"
	PictureStorageService_ListStoredPictures_FullMethodName = "/pictures_storage.PictureStorageService/ListStoredPictures"
	PictureStorageService_DownloadPicture_FullMethodName    = "/pictures_storage.PictureStorageService/DownloadPicture"
)

// PictureStorageServiceClient is the client API for PictureStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PictureStorageServiceClient interface {
	// Метод загрузки файла в ФС сервака
	UploadPicture(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PictureUploadRequest, emptypb.Empty], error)
	// Метод для получения списка загруженных картинок на сервер
	ListStoredPictures(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListPicturesResponse, error)
	// Метод выкачивания картинки с сервака по имени
	DownloadPicture(ctx context.Context, in *DownloadPictureRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadPictureResponse], error)
}

type pictureStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPictureStorageServiceClient(cc grpc.ClientConnInterface) PictureStorageServiceClient {
	return &pictureStorageServiceClient{cc}
}

func (c *pictureStorageServiceClient) UploadPicture(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PictureUploadRequest, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PictureStorageService_ServiceDesc.Streams[0], PictureStorageService_UploadPicture_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PictureUploadRequest, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PictureStorageService_UploadPictureClient = grpc.ClientStreamingClient[PictureUploadRequest, emptypb.Empty]

func (c *pictureStorageServiceClient) ListStoredPictures(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListPicturesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPicturesResponse)
	err := c.cc.Invoke(ctx, PictureStorageService_ListStoredPictures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pictureStorageServiceClient) DownloadPicture(ctx context.Context, in *DownloadPictureRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadPictureResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PictureStorageService_ServiceDesc.Streams[1], PictureStorageService_DownloadPicture_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadPictureRequest, DownloadPictureResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PictureStorageService_DownloadPictureClient = grpc.ServerStreamingClient[DownloadPictureResponse]

// PictureStorageServiceServer is the server API for PictureStorageService service.
// All implementations must embed UnimplementedPictureStorageServiceServer
// for forward compatibility.
type PictureStorageServiceServer interface {
	// Метод загрузки файла в ФС сервака
	UploadPicture(grpc.ClientStreamingServer[PictureUploadRequest, emptypb.Empty]) error
	// Метод для получения списка загруженных картинок на сервер
	ListStoredPictures(context.Context, *emptypb.Empty) (*ListPicturesResponse, error)
	// Метод выкачивания картинки с сервака по имени
	DownloadPicture(*DownloadPictureRequest, grpc.ServerStreamingServer[DownloadPictureResponse]) error
	mustEmbedUnimplementedPictureStorageServiceServer()
}

// UnimplementedPictureStorageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPictureStorageServiceServer struct{}

func (UnimplementedPictureStorageServiceServer) UploadPicture(grpc.ClientStreamingServer[PictureUploadRequest, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method UploadPicture not implemented")
}
func (UnimplementedPictureStorageServiceServer) ListStoredPictures(context.Context, *emptypb.Empty) (*ListPicturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStoredPictures not implemented")
}
func (UnimplementedPictureStorageServiceServer) DownloadPicture(*DownloadPictureRequest, grpc.ServerStreamingServer[DownloadPictureResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadPicture not implemented")
}
func (UnimplementedPictureStorageServiceServer) mustEmbedUnimplementedPictureStorageServiceServer() {}
func (UnimplementedPictureStorageServiceServer) testEmbeddedByValue()                               {}

// UnsafePictureStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PictureStorageServiceServer will
// result in compilation errors.
type UnsafePictureStorageServiceServer interface {
	mustEmbedUnimplementedPictureStorageServiceServer()
}

func RegisterPictureStorageServiceServer(s grpc.ServiceRegistrar, srv PictureStorageServiceServer) {
	// If the following call pancis, it indicates UnimplementedPictureStorageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PictureStorageService_ServiceDesc, srv)
}

func _PictureStorageService_UploadPicture_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PictureStorageServiceServer).UploadPicture(&grpc.GenericServerStream[PictureUploadRequest, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PictureStorageService_UploadPictureServer = grpc.ClientStreamingServer[PictureUploadRequest, emptypb.Empty]

func _PictureStorageService_ListStoredPictures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PictureStorageServiceServer).ListStoredPictures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PictureStorageService_ListStoredPictures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PictureStorageServiceServer).ListStoredPictures(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PictureStorageService_DownloadPicture_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadPictureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PictureStorageServiceServer).DownloadPicture(m, &grpc.GenericServerStream[DownloadPictureRequest, DownloadPictureResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PictureStorageService_DownloadPictureServer = grpc.ServerStreamingServer[DownloadPictureResponse]

// PictureStorageService_ServiceDesc is the grpc.ServiceDesc for PictureStorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PictureStorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pictures_storage.PictureStorageService",
	HandlerType: (*PictureStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStoredPictures",
			Handler:    _PictureStorageService_ListStoredPictures_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadPicture",
			Handler:       _PictureStorageService_UploadPicture_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadPicture",
			Handler:       _PictureStorageService_DownloadPicture_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "file.proto",
}
